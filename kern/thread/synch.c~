/*
 * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
 *	The President and Fellows of Harvard College.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Synchronization primitives.
 * The specifications of the functions are in synch.h.
 */

#include <types.h>
#include <lib.h>
#include <queue.h>
#include <spinlock.h>
#include <wchan.h>
#include <thread.h>
#include <current.h>
#include <synch.h>
#include <spl.h>

////////////////////////////////////////////////////////////
//
// Semaphore.

struct semaphore *
sem_create(const char *name, int initial_count)
{
        struct semaphore *sem;

        KASSERT(initial_count >= 0);

        sem = kmalloc(sizeof(struct semaphore));
        if (sem == NULL) {
                return NULL;
        }

        sem->sem_name = kstrdup(name);
        if (sem->sem_name == NULL) {
                kfree(sem);
                return NULL;
        }

	sem->sem_wchan = wchan_create(sem->sem_name);
	if (sem->sem_wchan == NULL) {
		kfree(sem->sem_name);
		kfree(sem);
		return NULL;
	}

	spinlock_init(&sem->sem_lock);
        sem->sem_count = initial_count;

        return sem;
}

void
sem_destroy(struct semaphore *sem)
{
        KASSERT(sem != NULL);

	/* wchan_cleanup will assert if anyone's waiting on it */
	spinlock_cleanup(&sem->sem_lock);
	wchan_destroy(sem->sem_wchan);
        kfree(sem->sem_name);
        kfree(sem);
}

void 
P(struct semaphore *sem)
{
        KASSERT(sem != NULL);

        /*
         * May not block in an interrupt handler.
         *
         * For robustness, always check, even if we can actually
         * complete the P without blocking.
         */
        KASSERT(curthread->t_in_interrupt == false);

	spinlock_acquire(&sem->sem_lock);
        while (sem->sem_count == 0) {
		/*
		 * Bridge to the wchan lock, so if someone else comes
		 * along in V right this instant the wakeup can't go
		 * through on the wchan until we've finished going to
		 * sleep. Note that wchan_sleep unlocks the wchan.
		 *
		 * Note that we don't maintain strict FIFO ordering of
		 * threads going through the semaphore; that is, we
		 * might "get" it on the first try even if other
		 * threads are waiting. Apparently according to some
		 * textbooks semaphores must for some reason have
		 * strict ordering. Too bad. :-)
		 *
		 * Exercise: how would you implement strict FIFO
		 * ordering?
		 */
		wchan_lock(sem->sem_wchan);
		spinlock_release(&sem->sem_lock);
                wchan_sleep(sem->sem_wchan);

		spinlock_acquire(&sem->sem_lock);
        }
        KASSERT(sem->sem_count > 0);
        sem->sem_count--;
	spinlock_release(&sem->sem_lock);
}

void
V(struct semaphore *sem)
{
        KASSERT(sem != NULL);

	spinlock_acquire(&sem->sem_lock);

        sem->sem_count++;
        KASSERT(sem->sem_count > 0);
	wchan_wakeone(sem->sem_wchan);

	spinlock_release(&sem->sem_lock);
}

////////////////////////////////////////////////////////////
//
// Lock.

struct lock *
lock_create(const char *name)
{
        struct lock *lock;

        lock = kmalloc(sizeof(struct lock));
        if (lock == NULL) {
                return NULL;
        }

        lock->lk_name = kstrdup(name);
        if (lock->lk_name == NULL) {
                kfree(lock);
                return NULL;
        }
        
        // add stuff here as needed
      
       
        //do i need to initialize hold?
        lock->lock_wchan = wchan_create(lock->lk_name);
        
        if(lock->lock_wchan == NULL){
        kfree(lock->lk_name);
        kfree(lock);
        return NULL;
        }
        
        lock->lock_hold = 0;
        lock->currentplace = NULL;
        
       
        
        return lock;
              
}

void
lock_destroy(struct lock *lock)
{
        KASSERT(lock != NULL);

        // add stuff here as needed
        //spinlock_cleanup(lock->my_lock);
        //wchan_destroy(lock->lock_wchan);
        
       //? KASSERT(lock->lock_hold && lock->currentplace != NULL);
        
        wchan_destroy(lock->lock_wchan);
        
        kfree(lock->lk_name);
        kfree(lock);
        
        lock = NULL;
       
        
}

void
lock_acquire(struct lock *lock)
{
        // Write this
        KASSERT(lock != NULL);
        
        
        KASSERT(curthread->t_in_interrupt == false);
        
        //disable intruupts
        int rude;
        
        rude = splhigh();
        
        while(lock->lock_hold && lock->currentplace != curthread){
        //sleep
         wchan_lock(lock->lock_wchan);
        
         wchan_sleep(lock->lock_wchan);
         
         }
         
         //KASSERT(lock->lock_hold != 1); //might need to add more
        lock->lock_hold = 1;
        lock->currentplace = curthread;
        
        splx(rude);
        
        
        

        //(void)lock;  // suppress warning until code gets written
}

void
lock_release(struct lock *lock)
{
        // Write this
        //disable interups
        int rude;
        
        KASSERT(lock!= NULL);
        //KASSERT(lock->lock_hold == 1);
        
        rude = splhigh();
        
        
        
        lock->currentplace = NULL;
        lock->lock_hold = 0;
        
        wchan_wakeone(lock->lock_wchan);
        //wake up thread?
        
        splx(rude);
        
        
        

        //(void)lock;  // suppress warning until code gets written
}

bool
lock_do_i_hold(struct lock *lock)
{
        // Write this
        if(lock->currentplace == curthread){
        return true;
        }else{
        
        return false;
        }

        //(void)lock;  // suppress warning until code gets written        
}

///////////////////////////////////////////////////////////
//
// CV


struct cv *
cv_create(const char *name)
{
        struct cv *cv;

        cv = kmalloc(sizeof(struct cv));
        if (cv == NULL) {
                return NULL;
        }

        cv->cv_name = kstrdup(name);
        if (cv->cv_name==NULL) {
                kfree(cv);
                return NULL;
        }
        
        // add stuff here as needed
        cv->counter = 0;
       // cv->q = q_create(1);
        
        return cv;
}

void
cv_destroy(struct cv *cv)
{
        KASSERT(cv != NULL);

        // add stuff here as needed
      //  KASSERT( cv->counter == 0);
        
      //  KASSERT(q_empty(cv->q));
        
       // q_destroy(cv->q);  //me
        
        kfree(cv->cv_name);
        kfree(cv);
        
        cv = NULL;
}

void
cv_wait(struct cv *cv, struct lock *lock)
{
        // Write this
        //make interupt thingy
        
        int rude;
        
        
        
        // make sure i own the lock?
        KASSERT(cv != NULL);
        KASSERT(lock != NULL);
        KASSERT(lock_do_i_hold(lock));
        
        KASSERT(curthread->t_in_interrupt == false);
        
        rude = splhigh();
        
        
        lock_release(lock);
        
        cv->counter = cv->counter + 1;
        
        //KASSERT(!q_preallocate(cv->q, cv->counter));
        //KASSERT(!q_addtail(cv->q, curthread));
      
      
  //sleep
 
         wchan_lock(lock->lock_wchan);
         wchan_sleep(lock->lock_wchan);
         

         
         lock_acquire(lock);
         
    
         
        splx(rude);
        
        
      //  cv->counter = cv->counter + 1;
     // lock_acquire(lock);
        
       // splx(rude);
        
       // (void)cv;    // suppress warning until code gets written
       // (void)lock;  // suppress warning until code gets written
}

void
cv_signal(struct cv *cv, struct lock *lock)
{
        // Write this
        int rude;
        
        KASSERT(cv != NULL);
        KASSERT(lock != NULL);
        KASSERT(lock_do_i_hold(lock));
        
        rude = splhigh();
       
        
        cv->counter = cv->counter -1;
        
        //struct thread * wakepls = q_remhead(cv->q);
        
        //wchan_wakeone(wakepls);
        wchan_wakeone(lock->lock_wchan);
        
   
        
	//(void)cv;    // suppress warning until code gets written
//	(void)lock;  // suppress warning until code gets written
}

void
cv_broadcast(struct cv *cv, struct lock *lock)
{
	// Write this
	KASSERT(cv != NULL);
	KASSERT(lock != NULL);
	KASSERT(lock_do_i_hold(lock));
	
	wchan_wakeall(lock->lock_wchan);
	
	//KASSERT(cv->counter == 0);
	//KASSERT(q_empty(cv->q));
	//(void)cv;    // suppress warning until code gets written
	//(void)lock;  // suppress warning until code gets written
}
